//---------------------------------------------------------------------------

#pragma hdrstop

#include "cloche.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#include <IdBaseComponent.hpp>
#include <IdComponent.hpp>
#include <IdTCPClient.hpp>
#include <IdTCPConnection.hpp>
//*********************************************************************************************
//* Programme : cloche.cpp date : 12/12/2018
//*---------------------------------------------------------------------------------------------------------
//*
//*Programmeurs : DHERBOMEZ VUILLEMENOT BILLARD
//*classe : BTSSN2
//*
//*--------------------------------------------------------------------------------------------------------
//* BUT : Faire sonner les cloches
//* Classe cloche
//*********************************************************************************************
// Définition des methodes

//permet d'envoyer une trame modbus
	void cloche::trameModbus(unsigned char msg,TIdTCPClient * Client){
	//conversion
		unsigned char* trameModbus;
		trameModbus= new unsigned char [12];
	//trame
		trameModbus[0]=0x00;
		trameModbus[1]=0x00;
		trameModbus[2]=0x00;
		trameModbus[3]=0x00;
		trameModbus[4]=0x00;
		trameModbus[5]=0x06;
		trameModbus[6]=0x00;
		trameModbus[7]=0x06;
		trameModbus[8]=0x00;
		trameModbus[9]=0x02;
		trameModbus[10]=0x00;
		trameModbus[11]=msg;
	//affichage
		for (int i = 0; i < 12; i++) {
			Client->IOHandler->Write(trameModbus[i]);
		}
		Sleep(250);
	}

//permet de retourner le marteau vers le bas
	void cloche::retourMarteau(TIdTCPClient * Client){
	//conversion
		unsigned char* trameModbus;
		trameModbus= new unsigned char [12];
	//trame
		trameModbus[0]=0x00;
		trameModbus[1]=0x00;
		trameModbus[2]=0x00;
		trameModbus[3]=0x00;
		trameModbus[4]=0x00;
		trameModbus[5]=0x06;
		trameModbus[6]=0x00;
		trameModbus[7]=0x06;
		trameModbus[8]=0x00;
		trameModbus[9]=0x02;
		trameModbus[10]=0x00;
		trameModbus[11]=0x00;
	//affichage
		for (int i = 0; i < 12; i++) {
			Client->IOHandler->Write(trameModbus[i]);
		}
		Sleep(250);


	}